model {
    person = user "Пользователь" "Пользователь социальной сети"
    socialNetwork = system "Социальная сеть" {
        apiGateway = container "API Gateway" {
            description "Маршрутизация запросов и управление доступом"
            technology "C++, Drogon"
        }

        webapp = container "Веб-приложение" "Предоставляет UI" "JavaScript, React"

        userService = container "User Service" {
            description "Управление пользователями и аутентификация"
            technology "Python, FastAPI"

            component userController "User Controller" "Обрабатывает HTTP запросы"
            component authService "Auth Service" "Управляет аутентификацией"
            component userServiceComponent "User Service" "Управляет данными пользователей"
            component userRepository "User Repository" "Доступ к данным пользователей"
            component grpcService "gRPC Service" "Предоставляет gRPC API"
        }

        statsService = container "Statistics Service" {
            description "Сбор и анализ статистики использования"
            technology "Python, FastAPI"

            component statsController "Stats Controller" "Обрабатывает HTTP запросы"
            component kafkaConsumer "Kafka Consumer" "Собирает статистику по действиям пользователей"
        }

        activitiesService = container "Activities Service" {
            description "Обработка и хранение постов и комментариев пользователей"
            technology "Python, FastAPI"

            component activitiesController "Activities Controller" "Обрабатывает HTTP запросы"
            component grpcService "gRPC Service" "Предоставляет gRPC API"
            component kafkaProducer "Kafka Producer" "Отправляет комментарии, лайки и т.п"
        }

        postgresDbUsers = container "PostgreSQL" {
            description "Хранение данных пользователей"
            technology "Database"
            style {
                shape storage
            }
        }

        postgresDbPosts = container "PostgreSQL" {
            description "Хранение постов и комментариев"
            technology "Database"
            style {
                shape storage
            }
        }

        clickhouseDb = container "ClickHouse" {
            description "Хранение статистики"
            technology "Database"
            style {
                shape storage
            }
        }

        kafka = container "Kafka" {
            description "Обмен событиями между сервисами"
            technology "Message Broker"
            style {
                shape queue
            }
        }
    }
    person -> socialNetwork.apiGateway "Использует" "HTTPS"
    socialNetwork.apiGateway -> socialNetwork.webapp "Перенаправляет" "HTTPS"
    socialNetwork.apiGateway -> socialNetwork.userService "Маршрутизирует" "JSON/HTTPS"
    socialNetwork.apiGateway -> socialNetwork.activitiesService "Маршрутизирует" "JSON/HTTPS"
    socialNetwork.apiGateway -> socialNetwork.statsService "Маршрутизирует" "JSON/HTTPS"

    socialNetwork.userService -> socialNetwork.postgresDbUsers "Читает/Пишет" "SQL"

    socialNetwork.activitiesService -> socialNetwork.kafka "Публикует" "user_events"
    socialNetwork.activitiesService -> socialNetwork.postgresDbPosts "Читает/Пишет" "SQL"
    socialNetwork.activitiesService -> socialNetwork.userService "Взаимодействует" "gRPC API"

    socialNetwork.statsService -> socialNetwork.kafka "Подписывается" "user_events"
    socialNetwork.statsService -> socialNetwork.clickhouseDb "Читает/Пишет" "SQL"
}
